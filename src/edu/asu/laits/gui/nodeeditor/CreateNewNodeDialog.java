/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package edu.asu.laits.gui.nodeeditor;

import edu.asu.laits.editor.ApplicationContext;
import edu.asu.laits.gui.MainWindow;
import edu.asu.laits.logger.UserActivityLog;
import edu.asu.laits.model.TaskSolution;
import edu.asu.laits.model.Vertex;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Toolkit;
import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import org.apache.log4j.Logger;

/**
 *
 * @author ramayantiwari
 */
public class CreateNewNodeDialog extends javax.swing.JDialog {

    private NewNodeDescPanel dPanel;
    private NodeEditorView nodeEditorView;
    private Vertex openVertex;
    private Vertex parentVertex;
    private static Logger logs = Logger.getLogger("DevLogs");
    private static Logger activityLogs = Logger.getLogger("ActivityLogs");

    public CreateNewNodeDialog(JDialog parent, Vertex v) {
        super(parent, true);

        initComponents();
        nodeEditorView = (NodeEditorView) parent;
        openVertex = v;
        parentVertex = nodeEditorView.getOpenVertex();
        initPanel();
        prepareDisplay();
    }

    private void initPanel() {
        dPanel = new NewNodeDescPanel(this, openVertex);
        descriptionPanel.setLayout(new java.awt.GridLayout(1, 1));
        descriptionPanel.add(dPanel);
        nodeEditorView.getController().initializeCreateNewNodeDialog(this);

        this.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent e) {
                close();
            }
        });
    }

    private void prepareDisplay() {
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        double height = screenSize.getHeight();
        int yPositionNodeEditor = (int) (height - getPreferredSize().height);
        
        if (ApplicationContext.getAppMode().equals("COACHED")) {
            cancelButton.setEnabled(false);
        }
        if (ApplicationContext.isAuthorMode()) {
            cancelButton.setText("Enter");
        }
        setTitle("Create New Node");
        setBounds((int) openVertex.getXPosition() + 100,
                yPositionNodeEditor / 2,
                getPreferredSize().width, getPreferredSize().height);
        pack();
        setVisible(true);
        setResizable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        descriptionPanel = new javax.swing.JPanel();
        checkButton = new javax.swing.JButton();
        demoButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        descriptionPanel.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        descriptionPanel.setFocusable(false);
        descriptionPanel.setPreferredSize(new java.awt.Dimension(506, 615));
        descriptionPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        checkButton.setText("Check");
        checkButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkButtonActionPerformed(evt);
            }
        });

        demoButton.setText("Demo");
        demoButton.setActionCommand("Give Up");
        demoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                demoButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Close");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(checkButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 82, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(28, 28, 28)
                .add(demoButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 78, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(cancelButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 78, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(58, 58, 58))
            .add(layout.createSequentialGroup()
                .add(13, 13, 13)
                .add(descriptionPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 492, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(0, 6, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(descriptionPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 476, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(checkButton)
                    .add(demoButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(cancelButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void checkButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkButtonActionPerformed
        // Action for Check Button
        logs.debug("Handling Check Action");
        TaskSolution correctSolution = ApplicationContext.getCorrectSolution();
        if (ApplicationContext.isCoachedMode()) {
            checkDescriptionPanelCoached(correctSolution);
        } else {
            checkDescriptionPanel(correctSolution);
        }
        
        // Add Check button used to Stats
        ApplicationContext.updateCheckUsageStats(0, openVertex.getName());
    }//GEN-LAST:event_checkButtonActionPerformed

    private void demoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_demoButtonActionPerformed
        // Action for Giveup Button
        activityLogs.debug(new UserActivityLog(UserActivityLog.SEEK_HELP, "Demo button pressed for Create New Node Description Panel"));
        dPanel.giveUpDescriptionPanel();
        dPanel.processDescriptionPanel();
        openVertex.setDescriptionStatus(Vertex.DescriptionStatus.GAVEUP);
        setTitle(openVertex.getName());
        validate();
        repaint();
        openVertex.setDescriptionStatus(Vertex.DescriptionStatus.GAVEUP);
        dPanel.setEditableTree(false);
        this.checkButton.setEnabled(false);
        this.demoButton.setEnabled(false);
        this.cancelButton.setEnabled(true);

        // Add Demo button used to Stats
        ApplicationContext.updateDemoUsageStats(0, openVertex.getName());
    }//GEN-LAST:event_demoButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        activityLogs.debug(new UserActivityLog(UserActivityLog.UI_ACTION, "Close button pressed for Create New Node Description Panel"));
        close();
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void checkDescriptionPanel(TaskSolution correctSolution) {
        activityLogs.debug(new UserActivityLog(UserActivityLog.SOLUTION_STEP, "Check button pressed for Create New Node Description Panel"));
        // Save Description Panel Information in the Vertex Object
        if (!dPanel.processDescriptionPanel()) {
            return;
        }

        if (correctSolution.checkNodeName(dPanel.getNodeName())) {
            openVertex.setDescriptionStatus(Vertex.DescriptionStatus.CORRECT);
            dPanel.setTextFieldBackground(Color.GREEN);
            checkButton.setEnabled(false);
            demoButton.setEnabled(false);
            cancelButton.setEnabled(true);
            activityLogs.debug(new UserActivityLog(UserActivityLog.SOLUTION_STEP, "User entered correct description"));
            dPanel.setEditableTree(false);
        } else {
            openVertex.setDescriptionStatus(Vertex.DescriptionStatus.INCORRECT);
            dPanel.setTextFieldBackground(Color.RED);
            setEditorMessage("That quantity is not used in the correct model. Please select another description.");
            activityLogs.debug(new UserActivityLog(UserActivityLog.SOLUTION_STEP, "User entered incorrect description"));
        }

        setTitle(openVertex.getName());
        validate();
        repaint();
    }

    private void checkDescriptionPanelCoached(TaskSolution correctSolution) {
        // Save Description Panel Information in the Vertex Object
        if (!dPanel.processDescriptionPanel()) {
            return;
        }

        int solutionCheck = correctSolution.checkNodeNameOrdered(dPanel.getNodeName());
        if (solutionCheck == 1) {
            openVertex.setDescriptionStatus(Vertex.DescriptionStatus.CORRECT);
            dPanel.setTextFieldBackground(Color.GREEN);
            checkButton.setEnabled(false);
            demoButton.setEnabled(false);
            cancelButton.setEnabled(true);
            activityLogs.debug(new UserActivityLog(UserActivityLog.SOLUTION_STEP, "User entered correct description"));
            dPanel.setEditableTree(false);
//            ApplicationContext.getTargetNodes().setNextNodes();
            demoButton.setEnabled(false);
        } 
        else if (solutionCheck == 2) {
            dPanel.setTextFieldBackground(Color.CYAN);
            openVertex.setDescriptionStatus(Vertex.DescriptionStatus.INCORRECT);
            setEditorMessage("Quantity is used in model, but is not ready to be defined. Please try another description.");
            activityLogs.debug(new UserActivityLog(UserActivityLog.SOLUTION_STEP, "User entered description out of order"));
        } 
        else {
            openVertex.setDescriptionStatus(Vertex.DescriptionStatus.INCORRECT);
            dPanel.setTextFieldBackground(Color.RED);
            setEditorMessage("That quantity is not used in the correct model. Please select another description.");
            activityLogs.debug(new UserActivityLog(UserActivityLog.SOLUTION_STEP, "User entered incorrect description"));
        }
    }

    public JPanel getDescriptionPanel() {
        return descriptionPanel;
    }

    private void close() {
        logs.debug("Closing Create New Node Dialog");
        if (ApplicationContext.isAuthorMode()) {
            dPanel.processDescriptionPanel();
        }

        // This if statement seems problematic 
        if (openVertex.getName().equals("") || openVertex.getDescriptionStatus().equals(Vertex.DescriptionStatus.INCORRECT)) {
            MainWindow.getInstance().getGraphEditorPane().setSelectionCell(openVertex.getJGraphVertex());
            MainWindow.getInstance().getGraphEditorPane().removeSelected();
        } else {
            // Initializing Calculations Panel again doesn't see necessary
            //ne.getCalculationsPanel().initPanel();
            nodeEditorView.getCalculationsPanel().refreshInputs();
        }

        nodeEditorView.getCalculationsPanel().setCreateButtonEnabled();
        // Refresh MainWidow to show the changes
        MainWindow.refreshGraph();
        if(ApplicationContext.isCoachedMode()){
            nodeEditorView.addHelpBalloon(openVertex.getName(), "newNodeClosed", "INPUTS");
            ApplicationContext.getCorrectSolution().getTargetNodes().setNextNodes();
        }
        this.dispose();
        // Why this is done after dispose ???

            
    }

    public void setEditorMessage(String msg) {
        logs.debug("Setting NE Statues message to " + msg);
        JOptionPane.showMessageDialog(this, msg, "Node Editor Error", JOptionPane.ERROR_MESSAGE);
    }

    // Getter for UI Elements
    public JButton getCancelButton() {
        return cancelButton;
    }

    public JButton getDemoButton() {
        return demoButton;
    }

    public JButton getCheckButton() {
        return checkButton;
    }
    
//  Reid added to help TargetNodes class
    public Vertex getParentVertex(){
        return parentVertex;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton checkButton;
    private javax.swing.JButton demoButton;
    private javax.swing.JPanel descriptionPanel;
    // End of variables declaration//GEN-END:variables
}
