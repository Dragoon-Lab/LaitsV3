/**
 * LAITS Project
 * Arizona State University
 * LAITS is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * LAITS is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.

 * You should have received a copy of the GNU Lesser General Public License
 * along with LAITS.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author: rptiwari
 */
package edu.asu.laits.gui.nodeeditor;

import edu.asu.laits.model.Vertex;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Stack;
import javax.swing.*;
import org.apache.log4j.Logger;

public class InputsPanelView extends javax.swing.JPanel {

    public LinkedList<JCheckBox> checkboxList;
    Stack undoStack = new Stack();
    boolean undoFlag = false;
    public String itemChanged;
    public boolean correctinput = false;
    NodeEditorView nodeEditor;
    public HashMap<Vertex, Boolean> initialSelection = new HashMap<Vertex, Boolean>();
    /**
     * Logger *
     */
    private static Logger logs = Logger.getLogger("DevLogs");
    private static Logger activityLogs = Logger.getLogger("ActivityLogs");

    public InputsPanelView(NodeEditorView ne) {
        initComponents();    
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        contentPanel = new javax.swing.JPanel();
        radioPanel = new javax.swing.JPanel();
        inputNodesSelectionOptionButton = new javax.swing.JRadioButton();
        fixedValueOptionButton = new javax.swing.JRadioButton();
        nodeDescriptionHeading = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        descriptionTextArea = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        checkBoxScrollPane = new javax.swing.JScrollPane();
        availableInputNodesPanels = new javax.swing.JPanel();
        buttonCreateNodeInputTab = new javax.swing.JButton();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        contentPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        radioPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        buttonGroup1.add(inputNodesSelectionOptionButton);
        inputNodesSelectionOptionButton.setText("Inputs:");
        inputNodesSelectionOptionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputNodesSelectionOptionButtonActionPerformed(evt);
            }
        });

        buttonGroup1.add(fixedValueOptionButton);
        fixedValueOptionButton.setText("Value is fixed, so no inputs");
        fixedValueOptionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fixedValueOptionButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout radioPanelLayout = new javax.swing.GroupLayout(radioPanel);
        radioPanel.setLayout(radioPanelLayout);
        radioPanelLayout.setHorizontalGroup(
            radioPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(radioPanelLayout.createSequentialGroup()
                .addGroup(radioPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(fixedValueOptionButton)
                    .addComponent(inputNodesSelectionOptionButton))
                .addContainerGap(74, Short.MAX_VALUE))
        );
        radioPanelLayout.setVerticalGroup(
            radioPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(radioPanelLayout.createSequentialGroup()
                .addComponent(fixedValueOptionButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(inputNodesSelectionOptionButton))
        );

        contentPanel.add(radioPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 28, 280, -1));

        nodeDescriptionHeading.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        nodeDescriptionHeading.setText("Description");
        contentPanel.add(nodeDescriptionHeading, new org.netbeans.lib.awtextra.AbsoluteConstraints(339, 122, 237, -1));

        descriptionTextArea.setEditable(false);
        descriptionTextArea.setBackground(new java.awt.Color(238, 238, 238));
        descriptionTextArea.setColumns(20);
        descriptionTextArea.setLineWrap(true);
        descriptionTextArea.setRows(5);
        descriptionTextArea.setAutoscrolls(false);
        jScrollPane1.setViewportView(descriptionTextArea);

        contentPanel.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 140, 220, 140));

        checkBoxScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        checkBoxScrollPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        availableInputNodesPanels.setMaximumSize(new java.awt.Dimension(32767, 500));

        javax.swing.GroupLayout availableInputNodesPanelsLayout = new javax.swing.GroupLayout(availableInputNodesPanels);
        availableInputNodesPanels.setLayout(availableInputNodesPanelsLayout);
        availableInputNodesPanelsLayout.setHorizontalGroup(
            availableInputNodesPanelsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 296, Short.MAX_VALUE)
        );
        availableInputNodesPanelsLayout.setVerticalGroup(
            availableInputNodesPanelsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 246, Short.MAX_VALUE)
        );

        checkBoxScrollPane.setViewportView(availableInputNodesPanels);

        jScrollPane2.setViewportView(checkBoxScrollPane);

        contentPanel.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 110, 300, 250));

        buttonCreateNodeInputTab.setText("Create Node");
        buttonCreateNodeInputTab.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        buttonCreateNodeInputTab.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCreateNodeInputTabActionPerformed(evt);
            }
        });
        contentPanel.add(buttonCreateNodeInputTab, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 440, -1, -1));

        add(contentPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 6, 560, 480));
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Event Handler for Fixed Value Option Button. Changes the UI for this
     * panel and prepares Fixed Value UI for Calculation Panel
     *
     * @param evt
     */
    private void fixedValueOptionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fixedValueOptionButtonActionPerformed
       
    }//GEN-LAST:event_fixedValueOptionButtonActionPerformed

    // Method for handling the click event of Input radio button
    private void inputNodesSelectionOptionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputNodesSelectionOptionButtonActionPerformed
        
    }//GEN-LAST:event_inputNodesSelectionOptionButtonActionPerformed

    private void buttonCreateNodeInputTabActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCreateNodeInputTabActionPerformed
        
    }//GEN-LAST:event_buttonCreateNodeInputTabActionPerformed
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel availableInputNodesPanels;
    private javax.swing.JButton buttonCreateNodeInputTab;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JScrollPane checkBoxScrollPane;
    private javax.swing.JPanel contentPanel;
    private javax.swing.JTextArea descriptionTextArea;
    private javax.swing.JRadioButton fixedValueOptionButton;
    private javax.swing.JRadioButton inputNodesSelectionOptionButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel nodeDescriptionHeading;
    private javax.swing.JPanel radioPanel;
    // End of variables declaration//GEN-END:variables
    
    private static String UNAVAILABLE_INPUTS_MSG = "Create some more nodes, and "
            + "they will appear here.  You have created only one node, and it "
            + "cannot be its own input, so there is nothing to display here.";
}
