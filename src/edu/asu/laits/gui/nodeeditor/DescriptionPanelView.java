/**
 * LAITS Project Arizona State University (c) 2013, Arizona Board of Regents for
 * and on behalf of Arizona State University. This file is part of LAITS.
 *
 * LAITS is free software: you can redistribute it and/or modify it under the
 * terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation, either version 3 of the License, or (at your option) any
 * later version.
 *
 * LAITS is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with LAITS. If not, see <http://www.gnu.org/licenses/>.
 *
 */
package edu.asu.laits.gui.nodeeditor;

import edu.asu.laits.editor.ApplicationContext;
import edu.asu.laits.gui.MainWindow;
import edu.asu.laits.logger.UserActivityLog;
import edu.asu.laits.model.Graph;
import edu.asu.laits.model.SolutionDTreeNode;
import edu.asu.laits.model.Vertex;
import java.awt.Color;
import java.util.Enumeration;
import java.util.Map;
import javax.swing.ImageIcon;
import javax.swing.JPanel;
import javax.swing.JTree;
import javax.swing.tree.*;

import org.apache.log4j.Logger;

import javax.swing.JLabel;

/**
 * Description panel specifically used in Calculation Panel's create new node button.
 * This needs refactoring in order to remove duplicate code.
 * 
 * @author ramayantiwari
 */
public class DescriptionPanelView extends JPanel {
    
    TreePath[] decisionTreePaths;
    SolutionDTreeNode root = null;
    DefaultTreeModel model = null;
    private boolean triedDuplicate = false;
    private static DescriptionPanelView descView;
    private NodeEditorView nodeEditor;
    
    /**
     * Loggers
     */
    private static Logger logs = Logger.getLogger("DevLogs");
    private static Logger activityLogs = Logger.getLogger("ActivityLogs");
    
    public DescriptionPanelView(NodeEditorView ne) {
        logs.debug("Initializing Description Panel View");
        initComponents();
        nodeEditor = ne;
        initPanel();
    }
    
    public void initPanel() {
        logs.info("Initializing Description Panel");
        if (!ApplicationContext.isAuthorMode()) {
            this.nodeNameTextField.setEditable(false);
            this.quantityDescriptionTextField.setEditable(false);
            initTree();
        } else {
            decisionTree.setVisible(false);
        }
        
        Vertex currentVertex = this.nodeEditor.getOpenVertex();
        this.nodeNameTextField.setText(currentVertex.getName());
        this.quantityDescriptionTextField.setText(currentVertex.getCorrectDescription());
        if(currentVertex.isDescriptionDone()  && !ApplicationContext.isAuthorMode()) {
            setEditableTree(false);
        }
        
        if(!ApplicationContext.isAuthorMode()){
            setBackGroundColor();
        }                
    }
    
    private void setBackGroundColor(){
        Vertex currentVertex = this.nodeEditor.getOpenVertex();
        
        if(currentVertex.getDescriptionStatus().equals(Vertex.DescriptionStatus.CORRECT)){
            setTextFieldBackground(Color.GREEN);
        }else if(currentVertex.getDescriptionStatus().equals(Vertex.DescriptionStatus.GAVEUP)){
            setTextFieldBackground(Color.YELLOW);
        }else if(currentVertex.getDescriptionStatus().equals(Vertex.DescriptionStatus.INCORRECT)){
            setTextFieldBackground(Color.RED);
        }
    }
    
    private void initTree() {
        logs.debug("Initializing Description Tree");
        root = ApplicationContext.getCorrectSolution().getdTreeNode();
        model = new DefaultTreeModel(root);
        decisionTree.setModel(model);
        jScrollPane2.setViewportView(decisionTree);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        contentPanel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        decisionTree = new javax.swing.JTree();
        evenMorePreciseLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        quantityDescriptionTextField = new javax.swing.JTextArea();
        referencesLabel = new javax.swing.JLabel();
        nodeNameTextField = new javax.swing.JTextField();
        NodeNameLabel = new javax.swing.JLabel();

        contentPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        decisionTree.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("root");
        javax.swing.tree.DefaultMutableTreeNode treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("A count of");
        javax.swing.tree.DefaultMutableTreeNode treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("rabbits in the population");
        javax.swing.tree.DefaultMutableTreeNode treeNode4 = new javax.swing.tree.DefaultMutableTreeNode("at the beginning of the year");
        javax.swing.tree.DefaultMutableTreeNode treeNode5 = new javax.swing.tree.DefaultMutableTreeNode("and it is constant from year to year");
        treeNode4.add(treeNode5);
        treeNode5 = new javax.swing.tree.DefaultMutableTreeNode("and it varies from year to year");
        treeNode4.add(treeNode5);
        treeNode3.add(treeNode4);
        treeNode4 = new javax.swing.tree.DefaultMutableTreeNode("totaled up across all years");
        treeNode3.add(treeNode4);
        treeNode4 = new javax.swing.tree.DefaultMutableTreeNode("averaged across all years");
        treeNode3.add(treeNode4);
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("rabbits born into the population");
        treeNode4 = new javax.swing.tree.DefaultMutableTreeNode("during a year");
        treeNode5 = new javax.swing.tree.DefaultMutableTreeNode("and it is constant from year to year");
        treeNode4.add(treeNode5);
        treeNode5 = new javax.swing.tree.DefaultMutableTreeNode("and it varies from year to year");
        treeNode4.add(treeNode5);
        treeNode3.add(treeNode4);
        treeNode4 = new javax.swing.tree.DefaultMutableTreeNode("across all years");
        treeNode3.add(treeNode4);
        treeNode4 = new javax.swing.tree.DefaultMutableTreeNode("per year on average");
        treeNode3.add(treeNode4);
        treeNode2.add(treeNode3);
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("A ratio of");
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("the number of rabbits in the population at the beginning of the year, divided by");
        treeNode4 = new javax.swing.tree.DefaultMutableTreeNode("the number of rabbits added to the population during that same year");
        treeNode3.add(treeNode4);
        treeNode4 = new javax.swing.tree.DefaultMutableTreeNode("the total number of rabbits added up across all years");
        treeNode3.add(treeNode4);
        treeNode4 = new javax.swing.tree.DefaultMutableTreeNode("the average number of rabbits across all years");
        treeNode3.add(treeNode4);
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("the number of rabbits added to the population during the year, divided by");
        treeNode4 = new javax.swing.tree.DefaultMutableTreeNode("the number of rabbits in the population at the beginning of that same year");
        treeNode3.add(treeNode4);
        treeNode4 = new javax.swing.tree.DefaultMutableTreeNode("the total number of rabbits added to the population across all years");
        treeNode3.add(treeNode4);
        treeNode4 = new javax.swing.tree.DefaultMutableTreeNode("the average number of rabbits added to the population each year");
        treeNode3.add(treeNode4);
        treeNode2.add(treeNode3);
        treeNode1.add(treeNode2);
        decisionTree.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        decisionTree.setEditable(true);
        decisionTree.setRowHeight(23);
        decisionTree.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                decisionTreeValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(decisionTree);

        contentPanel.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 28, 470, 285));

        evenMorePreciseLabel.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        evenMorePreciseLabel.setText("Select a Description for this Quantity (then click \"Check\")");
        contentPanel.add(evenMorePreciseLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 6, 390, -1));

        quantityDescriptionTextField.setWrapStyleWord(true);
        quantityDescriptionTextField.setColumns(20);
        quantityDescriptionTextField.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        quantityDescriptionTextField.setLineWrap(true);
        quantityDescriptionTextField.setRows(2);
        quantityDescriptionTextField.setDisabledTextColor(new java.awt.Color(102, 102, 102));
        quantityDescriptionTextField.setMargin(new java.awt.Insets(2, 3, 2, 3));
        jScrollPane1.setViewportView(quantityDescriptionTextField);

        contentPanel.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 380, 470, -1));

        referencesLabel.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        referencesLabel.setText("Precise description of the quantity:");
        contentPanel.add(referencesLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 360, 460, -1));

        nodeNameTextField.setDisabledTextColor(new java.awt.Color(102, 102, 102));
        contentPanel.add(nodeNameTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 320, 380, -1));

        NodeNameLabel.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        NodeNameLabel.setText("Node Name:");
        contentPanel.add(NodeNameLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 330, -1, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(contentPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 486, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(contentPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 452, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents
    
    private void decisionTreeValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_decisionTreeValueChanged
        resetTextFieldBackground();
        SolutionDTreeNode node = (SolutionDTreeNode) decisionTree.getLastSelectedPathComponent();
        TreeNode[] treeNodes;
        StringBuilder sb = new StringBuilder();
        
        if (node.isLeaf()) {
            treeNodes = node.getPath();
            
            for (int i = 1; i < treeNodes.length; i++) {
                sb.append(treeNodes[i].toString().trim());
                sb.append(" ");
            }
            
            this.quantityDescriptionTextField.setText(sb.toString().trim());
            this.nodeNameTextField.setText(node.getNodeName());
            this.repaint();                                    
        }        
    }//GEN-LAST:event_decisionTreeValueChanged
    
    // returns the value held by triedDuplicate    
    public boolean getTriedDuplicate() {
        return triedDuplicate;
    }
    
    public void collapseAll(javax.swing.JTree tree) {
        int row = tree.getRowCount() - 1;
        while (row >= 1) {
            tree.collapseRow(row);
            row--;
        }
    }
    
    public void expandTreePath(javax.swing.JTree tree, TreePath treepath) {
        collapseAll(tree);
        decisionTree.scrollPathToVisible(treepath);
        decisionTree.setSelectionPath(treepath);
    }
    
    protected static ImageIcon createImageIcon(String path) {
        java.net.URL imgURL = DescriptionPanelView.class.getResource(path);
        if (imgURL != null) {
            return new ImageIcon(imgURL);
        } else {
            System.err.println("Couldn't find file: " + path);
            return null;
        }
    }
    
    private void expandAll(JTree tree, TreePath parent) {
        TreeNode node = (TreeNode) parent.getLastPathComponent();
        if (node.getChildCount() >= 0) {
            for (Enumeration e = node.children(); e.hasMoreElements();) {
                TreeNode n = (TreeNode) e.nextElement();
                TreePath path = parent.pathByAddingChild(n);
                expandAll(tree, path);
            }
        }
        tree.expandPath(parent);
    }
    
    public boolean processDescriptionPanel() {
        if (getNodeName().trim().length() == 0) {
            activityLogs.error(new UserActivityLog(UserActivityLog.CLIENT_MESSAGE, "User entered empty node name."));
            nodeEditor.setEditorMessage("Node Name can not be empty.");
            return false;
        }
        
        Vertex currentVertex = nodeEditor.getOpenVertex();
        if (!currentVertex.getName().equals(getNodeName())) {
            if (!duplicatedNode(getNodeName())) {
                try {
                    currentVertex.setName(getNodeName().trim());
                    // Set title of NodeEditor to the New Name
                    nodeEditor.setTitle("Node Editor - " + currentVertex.getName());
                } catch (Exception ex) {
                    nodeEditor.setEditorMessage(ex.getMessage());
                    setTextFieldBackground(Color.RED);
                    return false;
                }
            } else {
                nodeEditor.setEditorMessage("The node name is already used by another node.\nPlease choose a new name for this node.");
                setTextFieldBackground(Color.RED);
                activityLogs.debug(new UserActivityLog(UserActivityLog.CLIENT_MESSAGE, "User entered duplicate node name"));
                return false;
            }
        }
        
        if (getNodeDesc().trim().isEmpty()) {
            nodeEditor.setEditorMessage("Please provide correct description for this node.");
            setTextFieldBackground(Color.RED);
             activityLogs.debug(new UserActivityLog(UserActivityLog.CLIENT_MESSAGE, "User entered empty node name"));
            return false;
        }
        
        currentVertex.setCorrectDescription(getNodeDesc().trim());
        return true;
    }
    
    private boolean duplicatedNode(String nodeName) {
        
        Graph graph = MainWindow.getInstance().getGraphEditorPane().getModelGraph();
        if (graph.getVertexByName(nodeName) != null && this.nodeEditor.getOpenVertex().getName() != nodeName) {
            return true;
        } else {
            return false;
        }
    }
    
    public void setTextFieldBackground(Color c) {
        if(ApplicationContext.isAuthorMode())
            return;
        nodeNameTextField.setBackground(c);
        quantityDescriptionTextField.setBackground(c);
    }
    
    public void resetTextFieldBackground() {
        if(ApplicationContext.isAuthorMode())
            return;
        nodeNameTextField.setBackground(Color.white);
        quantityDescriptionTextField.setBackground(Color.white);
    }
    
    public void giveUpDescriptionPanel() {
        String giveupNode = null;
        giveupNode = nodeEditor.getController().demoDescriptionPanel();
        setDescriptionTreeNode(giveupNode);
        setTextFieldBackground(Color.YELLOW);
    }
    
    private void setDescriptionTreeNode(String nodeName) {
        Enumeration<SolutionDTreeNode> allNodes = root.breadthFirstEnumeration();
        while (allNodes.hasMoreElements()) {
            SolutionDTreeNode node = allNodes.nextElement();
            
            if (node.isLeaf() && node.getNodeName().equals(nodeName)) {
                TreePath path = new TreePath(node.getPath());
                decisionTree.setSelectionPath(path);
            }
        }
    }
    
    public String printDescriptionPanelDetails() {
        StringBuilder sb = new StringBuilder();
        sb.append("Node Name : ");
        sb.append(nodeNameTextField.getText());
        sb.append(",  Description : ");
        sb.append(quantityDescriptionTextField.getText());
        sb.append(", Descrption Panel Status : " + nodeEditor.getOpenVertex().getDescriptionStatus());
        return sb.toString();
    }
    
    public void setDescriptionPanelDetails(Map<String, Object> map) {
        map.put("node-name", nodeNameTextField.getText());
        map.put("node-desc", quantityDescriptionTextField.getText());
        map.put("desc-panel-status", nodeEditor.getOpenVertex().getDescriptionStatus());        
    }
    
    public void setEditableTree(boolean b) {
        decisionTree.setEditable(b);
        decisionTree.setEnabled(b);
        nodeNameTextField.setEditable(b);
        nodeNameTextField.setEnabled(b);
    }
    
    public JLabel getTopDescriptionLabel() {
        return evenMorePreciseLabel;
    }
    
    public String getNodeName() {
        return this.nodeNameTextField.getText().trim();
    }
    
    public String getNodeDesc() {
        return this.quantityDescriptionTextField.getText().trim();
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel NodeNameLabel;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JPanel contentPanel;
    private javax.swing.JTree decisionTree;
    private javax.swing.JLabel evenMorePreciseLabel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField nodeNameTextField;
    private javax.swing.JTextArea quantityDescriptionTextField;
    private javax.swing.JLabel referencesLabel;
    // End of variables declaration//GEN-END:variables
}
