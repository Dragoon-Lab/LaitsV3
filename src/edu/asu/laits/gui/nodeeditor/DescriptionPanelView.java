/**
 * LAITS Project
 * Arizona State University
 * 
 */

package edu.asu.laits.gui.nodeeditor;

import edu.asu.laits.model.Vertex;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import javax.swing.ImageIcon;
import javax.swing.JPanel;
import javax.swing.JTree;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.tree.*;

import org.apache.log4j.Logger;


/**
 *
 * @author ramayantiwari
 */
public class DescriptionPanelView extends JPanel{

  TreePath[] decisionTreePaths;
  
  DefaultMutableTreeNode root = null;
  DefaultTreeModel model = null;
  private boolean triedDuplicate = false;
  private static DescriptionPanelView descView;
  private NodeEditor nodeEditor;
  
  private static Logger logs = Logger.getLogger(DescriptionPanelView.class);
  
  String getNodeName()
  {
      return this.nodeNameTextField.getText();
  }
  
  String getNodeDesc()
  {
      return this.quantityDescriptionTextField.getText();
  }
  
  
  public DescriptionPanelView(NodeEditor ne){
    initComponents();
    nodeEditor = ne;
    initPanel();
  }
  
  public void initPanel(){
      Vertex currentVertex=this.nodeEditor.getCurrentVertex();
      this.nodeNameTextField.setText(currentVertex.getName());
      this.quantityDescriptionTextField.setText(currentVertex.getCorrectDescription());
    
  }
  /**
   * Initialize Description Panel for a particular Vertex
   * @param inputVertex 
   */
  public void initPanelForSavedNode(){
    logs.trace("Initializing Description Panel for Node ");
    
    initTree();
    
  }
  
  public void initPanelForNewNode(){
    logs.trace("Initializing Description Panel for New Node");
    resetDescriptionPanel();
    initTree();    
  }
  
  private void resetDescriptionPanel(){
    nodeNameTextField.setText("");
    quantityDescriptionTextField.setText("");   
  }
  
  public void setquantityDescriptionTextField(String desc) {
    
  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        contentPanel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        decisionTree = new javax.swing.JTree();
        evenMorePreciseLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        quantityDescriptionTextField = new javax.swing.JTextArea();
        referencesLabel = new javax.swing.JLabel();
        nodeNameTextField = new javax.swing.JTextField();
        NodeNameLabel = new javax.swing.JLabel();

        contentPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        decisionTree.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("root");
        javax.swing.tree.DefaultMutableTreeNode treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("A count of");
        javax.swing.tree.DefaultMutableTreeNode treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("rabbits in the population");
        javax.swing.tree.DefaultMutableTreeNode treeNode4 = new javax.swing.tree.DefaultMutableTreeNode("at the beginning of the year");
        javax.swing.tree.DefaultMutableTreeNode treeNode5 = new javax.swing.tree.DefaultMutableTreeNode("and it is constant from year to year");
        treeNode4.add(treeNode5);
        treeNode5 = new javax.swing.tree.DefaultMutableTreeNode("and it varies from year to year");
        treeNode4.add(treeNode5);
        treeNode3.add(treeNode4);
        treeNode4 = new javax.swing.tree.DefaultMutableTreeNode("totaled up across all years");
        treeNode3.add(treeNode4);
        treeNode4 = new javax.swing.tree.DefaultMutableTreeNode("averaged across all years");
        treeNode3.add(treeNode4);
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("rabbits born into the population");
        treeNode4 = new javax.swing.tree.DefaultMutableTreeNode("during a year");
        treeNode5 = new javax.swing.tree.DefaultMutableTreeNode("and it is constant from year to year");
        treeNode4.add(treeNode5);
        treeNode5 = new javax.swing.tree.DefaultMutableTreeNode("and it varies from year to year");
        treeNode4.add(treeNode5);
        treeNode3.add(treeNode4);
        treeNode4 = new javax.swing.tree.DefaultMutableTreeNode("across all years");
        treeNode3.add(treeNode4);
        treeNode4 = new javax.swing.tree.DefaultMutableTreeNode("per year on average");
        treeNode3.add(treeNode4);
        treeNode2.add(treeNode3);
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("A ratio of");
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("the number of rabbits in the population at the beginning of the year, divided by");
        treeNode4 = new javax.swing.tree.DefaultMutableTreeNode("the number of rabbits added to the population during that same year");
        treeNode3.add(treeNode4);
        treeNode4 = new javax.swing.tree.DefaultMutableTreeNode("the total number of rabbits added up across all years");
        treeNode3.add(treeNode4);
        treeNode4 = new javax.swing.tree.DefaultMutableTreeNode("the average number of rabbits across all years");
        treeNode3.add(treeNode4);
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("the number of rabbits added to the population during the year, divided by");
        treeNode4 = new javax.swing.tree.DefaultMutableTreeNode("the number of rabbits in the population at the beginning of that same year");
        treeNode3.add(treeNode4);
        treeNode4 = new javax.swing.tree.DefaultMutableTreeNode("the total number of rabbits added to the population across all years");
        treeNode3.add(treeNode4);
        treeNode4 = new javax.swing.tree.DefaultMutableTreeNode("the average number of rabbits added to the population each year");
        treeNode3.add(treeNode4);
        treeNode2.add(treeNode3);
        treeNode1.add(treeNode2);
        decisionTree.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        decisionTree.setEditable(true);
        decisionTree.setRowHeight(23);
        decisionTree.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                decisionTreeValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(decisionTree);

        contentPanel.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 28, 595, 285));

        evenMorePreciseLabel.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        evenMorePreciseLabel.setText("Description Tree of the Problem");
        contentPanel.add(evenMorePreciseLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 6, 363, -1));

        quantityDescriptionTextField.setWrapStyleWord(true);
        quantityDescriptionTextField.setColumns(20);
        quantityDescriptionTextField.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        quantityDescriptionTextField.setLineWrap(true);
        quantityDescriptionTextField.setRows(2);
        quantityDescriptionTextField.setDisabledTextColor(new java.awt.Color(102, 102, 102));
        quantityDescriptionTextField.setMargin(new java.awt.Insets(2, 3, 2, 3));
        jScrollPane1.setViewportView(quantityDescriptionTextField);

        contentPanel.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 457, 595, -1));

        referencesLabel.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        referencesLabel.setText("Precise description of the quantity:");
        contentPanel.add(referencesLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 435, 572, -1));

        nodeNameTextField.setDisabledTextColor(new java.awt.Color(102, 102, 102));
        contentPanel.add(nodeNameTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(105, 389, 496, -1));

        NodeNameLabel.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        NodeNameLabel.setText("Node Name:");
        contentPanel.add(NodeNameLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 395, -1, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(contentPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 30, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(contentPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void decisionTreeValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_decisionTreeValueChanged
       DefaultMutableTreeNode node = (DefaultMutableTreeNode) decisionTree.getLastSelectedPathComponent();
       TreeNode[] treeNodes;
       String fullDesc="";
       if(node.isLeaf()){
           treeNodes=node.getPath();
           for(TreeNode treeNode : treeNodes){
               if(!treeNode.toString().equals("root"))
                fullDesc+=" "+treeNode.toString();
           }
           this.quantityDescriptionTextField.setText(fullDesc.trim());
       }
    }//GEN-LAST:event_decisionTreeValueChanged

  // returns the value held by triedDuplicate
  public boolean getTriedDuplicate() {
    return triedDuplicate;
  }

 

  

  public void collapseAll(javax.swing.JTree tree) {
    int row = tree.getRowCount() - 1;
    while (row >= 1) {
      tree.collapseRow(row);
      row--;
    }
  }

  public void expandTreePath(javax.swing.JTree tree, TreePath treepath) {
    collapseAll(tree);
    decisionTree.scrollPathToVisible(treepath);
    decisionTree.setSelectionPath(treepath);
  }
 protected static ImageIcon createImageIcon(String path) {
    java.net.URL imgURL = DescriptionPanelView.class.getResource(path);
    if (imgURL != null) {
      return new ImageIcon(imgURL);
    } else {
      System.err.println("Couldn't find file: " + path);
      return null;
    }
  }

  private void initTree() {
    
    model = new DefaultTreeModel(root);
    decisionTree.setModel(model);

    jScrollPane2.setViewportView(decisionTree);

    TreeNode root = (TreeNode) decisionTree.getModel().getRoot();
    expandAll(decisionTree, new TreePath(root));
  }

  private void expandAll(JTree tree, TreePath parent) {
    TreeNode node = (TreeNode) parent.getLastPathComponent();
    if (node.getChildCount() >= 0) {
      for (Enumeration e = node.children(); e.hasMoreElements();) {
        TreeNode n = (TreeNode) e.nextElement();
        TreePath path = parent.pathByAddingChild(n);
        expandAll(tree, path);
      }
    }
    tree.expandPath(parent);
  }

  /*
   * Method to process the Action of Ok Button on the Description Panel
   * This is called from NodeEditor
   */
  public boolean processSubmitAction(){
    // TODO - validate if a node already has a correct description
      
    
    return false;
  }
  
  private boolean validateNodeName(){
    String inputNodeName = nodeNameTextField.getText();
    
    
    
    return true;
  }
  
  private boolean validateNodeDescription(){
  if(quantityDescriptionTextField.getText().isEmpty()){
      
      return false;
    }
    return true;
  }

  public void processDeleteAction(){
    logs.trace(  "Author deleted the node.");
    
  }

  public void processCloseAction(){
    
  }
  
  public boolean processDescriptionPanel(){
      if(getNodeName().trim().length() == 0){
        nodeEditor.setEditorMessage("Node Name can not be empty.");
        return false;
      }
      
      Vertex currentVertex = nodeEditor.getCurrentVertex();
      if (!currentVertex.getName().equals(getNodeName())) {
          if(getNodeName().trim().length() > 20)
          {
              nodeEditor.setEditorMessage("Node Name can not be larger than 20 characters.");
              return false;
          }
          if (!duplicatedNode(getNodeName())) 
          {
              try {
                  currentVertex.setName(getNodeName().trim());
              } catch (Exception ex) {
                  nodeEditor.setEditorMessage(ex.getMessage());
                  return false;
              }
          } else {
              nodeEditor.setEditorMessage("The node name is already used by another node. Please have a new name for this node.");
              return false;
          }
      }

      if (getNodeDesc().trim().isEmpty()) {
          nodeEditor.setEditorMessage("Please provide correct description for this node.");
          return false;
      }

      currentVertex.setCorrectDescription(getNodeDesc().trim());
      return true;
  }
  
  private boolean duplicatedNode(String nodeName) {
      Iterator<Vertex> it = nodeEditor.getGraphPane().getModelGraph().vertexSet().iterator();
      
      while(it.hasNext()){
          if(it.next().getName().equals(nodeName))
              return true;
      }
        return false;
  }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel NodeNameLabel;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JPanel contentPanel;
    private javax.swing.JTree decisionTree;
    private javax.swing.JLabel evenMorePreciseLabel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField nodeNameTextField;
    private javax.swing.JTextArea quantityDescriptionTextField;
    private javax.swing.JLabel referencesLabel;
    // End of variables declaration//GEN-END:variables

    
  
}

